@use 'sass:map';
@import 'lib/vars';

$font-family: mabry, 'work sans', arial, helvetica, sans-serif;
$font-specs: (
  (
    default-element: 'h1',
    class-name: 'mf-fs-1',
    values: (
      font-family: $font-family,
      font-size: 120px,
      font-size-mobile: 56px,
      font-weight: 700,
      letter-spacing: -0.03em,
      letter-spacing-mobile: -0.02em,
      line-height: 100%,
      line-height-mobile: 100%,
    ),
  ),
  (
    default-element: 'h2',
    class-name: 'mf-fs-2',
    values: (
      font-family: $font-family,
      font-size: 80px,
      font-size-mobile: 56px,
      font-weight: 700,
      letter-spacing: -0.03em,
      letter-spacing-mobile: -0.02em,
      line-height: 100%,
      line-height-mobile: 100%,
    ),
  ),
  (
    default-element: 'h3',
    class-name: 'mf-fs-3',
    values: (
      font-family: $font-family,
      font-size: 56px,
      font-size-mobile: 49px,
      font-weight: 700,
      letter-spacing: -0.03em,
      letter-spacing-mobile: -0.02em,
      line-height: 100%,
      line-height-mobile: 120%,
    ),
  ),
  (
    default-element: 'h4',
    class-name: 'mf-fs-4',
    values: (
      font-family: $font-family,
      font-size: 40px,
      font-size-mobile: 32px,
      font-weight: 700,
      letter-spacing: -0.02em,
      letter-spacing-mobile: -0.02em,
      line-height: 100%,
      line-height-mobile: 100%,
    ),
  ),
  (
    default-element: 'h5',
    class-name: 'mf-fs-5',
    values: (
      font-family: $font-family,
      font-size: 32px,
      font-size-mobile: 32px,
      font-weight: 700,
      letter-spacing: -0.02em,
      letter-spacing-mobile: -0.02em,
      line-height: 120%,
      line-height-mobile: 120%,
    ),
  ),
  (
    default-element: 'h6',
    class-name: 'mf-fs-6',
    values: (
      font-family: $font-family,
      font-size: 24px,
      font-size-mobile: 24px,
      font-weight: 700,
      letter-spacing: -0.02em,
      letter-spacing-mobile: -0.02em,
      line-height: 120%,
      line-height-mobile: 120%,
    ),
  ),
  (
    class-name: 'mf-fs-hero',
    values: (
      font-family: $font-family,
      font-size: 200px,
      font-size-mobile: 64px,
      font-weight: 700,
      letter-spacing: -0.03em,
      letter-spacing-mobile: -0.02em,
      line-height: 90%,
      line-height-mobile: 100%,
    ),
  ),
  (
    class-name: 'mf-fs-p-xl',
    values: (
      font-family: $font-family,
      font-size: 56px,
      font-size-mobile: 32px,
      font-weight: 400,
      letter-spacing: -0.02em,
      letter-spacing-mobile: -0.02em,
      line-height: 100%,
      line-height-mobile: 120%,
    ),
  ),
  (
    class-name: 'mf-fs-p-l',
    values: (
      font-family: $font-family,
      font-size: 32px,
      font-size-mobile: 28px,
      font-weight: 400,
      letter-spacing: -0.02em,
      letter-spacing-mobile: -0.02em,
      line-height: 120%,
      line-height-mobile: 120%,
    ),
  ),
  (
    default-element: 'p',
    class-name: 'mf-fs-p',
    values: (
      font-family: $font-family,
      font-size: 24px,
      font-size-mobile: 24px,
      font-weight: 400,
      letter-spacing: -0.02em,
      letter-spacing-mobile: -0.02em,
      line-height: 120%,
      line-height-mobile: 120%,
    ),
  ),
  (
    class-name: 'mf-fs-p-s',
    values: (
      font-family: $font-family,
      font-size: 16px,
      font-size-mobile: 16px,
      font-weight: 400,
      letter-spacing: normal,
      letter-spacing-mobile: normal,
      line-height: 120%,
      line-height-mobile: 120%,
    ),
  ),
  (
    class-name: 'mf-fs-p-xs',
    values: (
      font-family: $font-family,
      font-size: 12px,
      font-size-mobile: 12px,
      font-weight: 400,
      letter-spacing: normal,
      letter-spacing-mobile: normal,
      line-height: 120%,
      line-height-mobile: 120%,
    ),
  )
);

// Literal declarations of our web font
/* stylelint-disable */
@font-face {
  font-family: mabry;
  src: url('./static/fonts/mabry-regular-pro.eot');
  src: url('./static/fonts/mabry-regular-pro.eot?#iefix')
      format('embedded-opentype'),
    url('./static/fonts/mabry-regular-pro.woff2') format('woff2'),
    url('./static/fonts/mabry-regular-pro.woff') format('woff'),
    url('./static/fonts/mabry-regular-pro.ttf') format('truetype');
  font-weight: 400;
  font-style: normal;
}

@font-face {
  font-family: mabry;
  src: url('./static/fonts/mabry-black-pro.eot');
  src: url('./static/fonts/mabry-black-pro.eot?#iefix')
      format('embedded-opentype'),
    url('./static/fonts/mabry-black-pro.woff2') format('woff2'),
    url('./static/fonts/mabry-black-pro.woff') format('woff'),
    url('./static/fonts/mabry-black-pro.ttf') format('truetype');
  font-weight: 700;
  font-style: normal;
}
/* stylelint-enable */

// Publish raw CSS vars
:root {
  @each $font-spec in $font-specs {
    --#{map.get($font-spec, "class-name")}: #{map.get(
        map.get($font-spec, 'values'),
        'font-size'
      )};
  }
}

// Publish defaults for h1...h6, p, etc
@each $font-spec in $font-specs {
  @if map.get($font-spec, 'default-element') {
    #{map.get($font-spec, 'default-element')} {
      font-family: map.get(
        map.get($font-spec, 'values'),
        'font-family'
      ) !important;
      font-size: map.get(
        map.get($font-spec, 'values'),
        'font-size'
      ) !important;
      font-weight: map.get(
        map.get($font-spec, 'values'),
        'font-weight'
      ) !important;
      letter-spacing: map.get(
        map.get($font-spec, 'values'),
        'letter-spacing'
      ) !important;
      line-height: map.get(
        map.get($font-spec, 'values'),
        'line-height'
      ) !important;
    }
  }

  // Publish generic type classes, e.g. `.mf-fs-1`
  #{'.'}#{map.get($font-spec, 'class-name')} {
    font-size: map.get(
      map.get($font-spec, 'values'),
      'font-size'
    ) !important;
    letter-spacing: map.get(
      map.get($font-spec, 'values'),
      'letter-spacing'
    ) !important;
    line-height: map.get(
      map.get($font-spec, 'values'),
      'line-height'
    ) !important;
  }
}

// ...aaaand once again for mobile.
@media only screen and (max-width: $mobile-max-screen-size) {
  // Publish raw CSS vars
  :root {
    @each $font-spec in $font-specs {
      --#{map.get($font-spec, "class-name")}: #{map.get(
          map.get($font-spec, 'values'),
          'font-size-mobile'
        )};
    }
  }

  // Publish defaults for h1...h6, p, etc
  @each $font-spec in $font-specs {
    @if map.get($font-spec, 'default-element') {
      #{map.get($font-spec, 'default-element')} {
        font-family: map.get(
          map.get($font-spec, 'values'),
          'font-family'
        ) !important;
        font-size: map.get(
          map.get($font-spec, 'values'),
          'font-size-mobile'
        ) !important;
        font-weight: map.get(
          map.get($font-spec, 'values'),
          'font-weight'
        ) !important;
        letter-spacing: map.get(
          map.get($font-spec, 'values'),
          'letter-spacing-mobile'
        ) !important;
        line-height: map.get(
          map.get($font-spec, 'values'),
          'line-height-mobile'
        ) !important;
      }
    }

    // Publish generic type classes, e.g. `.mf-fs-1`
    #{'.'}#{map.get($font-spec, 'class-name')} {
      font-size: map.get(
        map.get($font-spec, 'values'),
        'font-size-mobile'
      ) !important;
      letter-spacing: map.get(
        map.get($font-spec, 'values'),
        'letter-spacing-mobile'
      ) !important;
      line-height: map.get(
        map.get($font-spec, 'values'),
        'line-height-mobile'
      ) !important;
    }
  }
}



// Some generic style literals...
body {
  font-family: $font-family;
}

a {
  color: inherit;
  text-decoration: underline;

  &:hover {
    color: inherit;
    text-decoration: underline;
  }
}

// And undo these styles for placeholder links/named anchors (without href).
// It would be more straightforward to just use a[href] in previous block, but that
// causes specificity issues in many other styles that are too complex to fix.
// See https://github.com/twbs/bootstrap/issues/19402

a:not([href]):not([class]) {
  &,
  &:hover {
    color: inherit;
    text-decoration: none;
  }
}
